function filterRecipes() {
    const filteredRecipeCards = [];

    for (let i = 0; i < recipeCards.length; i++) {
        const card = recipeCards[i];
        const cardFilters = card.getAttribute('data-filter').toLowerCase();
        const activeFiltersLowerCase = activeFilters.ingredients.map(filter => filter.toLowerCase());
        
        let isCardMatching = true;
        
        if (activeFiltersLowerCase.length > 0) {
            for (let j = 0; j < activeFiltersLowerCase.length; j++) {
                if (!cardFilters.includes(activeFiltersLowerCase[j])) {
                    isCardMatching = false;
                    break;
                }
            }
        }

        if (isCardMatching) {
            filteredRecipeCards.push(card);
        }
    }

    recipeCards.length = 0;
    Array.prototype.push.apply(recipeCards, filteredRecipeCards);

    createDivWithLength(recipeCards);
    updateRecipeContainer();
}

// fonction de tri en boucle



function filterRecipes() {
    
    const filteredRecipeCards = recipeCards.filter(card => {
      const cardFilters = card.getAttribute('data-filter').toLowerCase();
      const activeFiltersLowerCase = activeFilters.ingredients.map(filter => filter.toLowerCase());
      const isCardMatching = activeFiltersLowerCase.length === 0 || activeFiltersLowerCase.every(activeFilter => {
        // Vérifiez si au moins un filtre actif est inclus dans la chaîne cardFilters
        return cardFilters.includes(activeFilter);
      });
      
      return isCardMatching;
    });
    
    recipeCards.length = 0;
    Array.prototype.push.apply(recipeCards, filteredRecipeCards);
    
    createDivWithLength(recipeCards);
    updateRecipeContainer();
  }
  let recipeCards = Array.from(document.querySelectorAll('.recipe-card'));
  console.log(recipeCards);


  // fonction de tri en objet


  Développer un algorithme pour résoudre un problème
La fiche d’investigation de fonctionnalité sur l’algorithme de recherche peut être validée si : 

 ❒ Elle contient un bref texte rappelant la problématique : une recherche à deux étapes

 ❒ Ellel contient un schéma expliquant la décomposition logique de la recherche

 ❒ Le schéma est logique, montre bien le découpage de la recherche en deux étapes et prend en compte la problématique d’affichage des résultats. Il n’est pas nécessaire qu’il suive la convention UML.

 ❒ Le choix du moteur de recherche recommandé est justifié par une comparaison chiffrée des performances des deux algorithmes issue d’un outil de benchmark (au moins le nombre d’opérations par seconde).

 ❒ Elle  est livré au format PDF

Décomposer un problème informatique
Le code source peut être validé si :

 ❒ Le repo Git contient 2 branches contenant les 2 versions fonctionnelles du moteur de recherche 

 ❒ Il y a 2 versions fonctionnelles du moteur de recherche implémentées selon les différents schémas indiqués par l’étudiant dans son document d’analyse

 ❒ Aucune librairie tierce n’est utilisée pour le JavaScript

 ❒ Le code est correctement indenté

 ❒ Le code ne donne pas d’avertissement au Linter ou à la console.

Zoom sur le Green Code

 ❒ Le code est bien décomposé en fonctions réutilisables. A minima nous avons une fonction pour l’affichage des cartes de recettes et une fonction pour les sélecteurs de Tags.

Zoom sur la sécurisation de l’interface d’un site internet

 ❒ Aucun code html n’est interprété quand il est entré dans un formulaire.